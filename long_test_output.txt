KeyWord		function
Identifier	add$
Seperator	[
Identifier	x
Operator	:
KeyWord		int
Seperator	,
Identifier	y
Operator	:
KeyWord		int
Seperator	]
Seperator	{
KeyWord		return
Identifier	x
Operator	+
Identifier	y
Seperator	;
Seperator	}
KeyWord		function
Identifier	sub$
Seperator	[
Identifier	x
Operator	:
KeyWord		int
Seperator	,
Identifier	y
Operator	:
KeyWord		int
Seperator	]
Seperator	{
KeyWord		return
Identifier	x
Operator	-
Identifier	y
Seperator	;
Seperator	}
Operator	%%
KeyWord		int
Identifier	x
Seperator	,
Identifier	y
Seperator	,
Identifier	add
Seperator	,
Identifier	sub
Seperator	,
Identifier	result
Seperator	;
KeyWord		get
Seperator	(
Identifier	x
Seperator	,
Identifier	y
Seperator	)
Seperator	;
Identifier	add
Operator	=
Identifier	add$
Seperator	(
Identifier	x
Seperator	,
Identifier	y
Seperator	)
Seperator	)
Seperator	;
Identifier	sub
Operator	=
Identifier	sub$
Seperator	(
Identifier	x
Seperator	,
Identifier	y
Seperator	)
Seperator	;
KeyWord		put
Seperator	(
Seperator	(
Identifier	add
Operator	+
Identifier	sub
Seperator	)
Operator	+
Seperator	(
Identifier	add
Operator	-
Identifier	sub
Seperator	)
Seperator	)
Seperator	;
KeyWord		int
Identifier	i
Seperator	;
Identifier	i
Operator	=
Integer		0
Seperator	;
KeyWord		while
Seperator	(
Identifier	i
Operator	<
Integer		10
Seperator	)
Seperator	{
KeyWord		put
Seperator	(
Identifier	i
Seperator	)
Seperator	;
Identifier	i
Operator	=
Identifier	i
Operator	+
Integer		1
Seperator	;
Seperator	}
